7. Ejemplos de código clave
---------------------------

**Ejemplo de modelo de base de datos (models.py):**

```python
from sqlalchemy import Column, Integer, String
from .database import Base

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
```

**Ejemplo de esquema de validación (schemas.py):**

```python
from pydantic import BaseModel

class UserCreate(BaseModel):
    email: str
    password: str
```

**Ejemplo de endpoint (routers/auth.py):**

```python
@router.post("/register")
def register(user: UserCreate, db: Session = Depends(get_db)):
    # Lógica para crear usuario
    ...
```

**Ejemplo de fetch en el frontend (register/page.tsx):**

```tsx
const res = await fetch("http://localhost:8000/auth/register", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({ email, password })
});
```

**Ejemplo de componente React (login/page.tsx):**

```tsx
export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  // ...
  return (
    <form onSubmit={handleSubmit}>
      <input value={email} onChange={e => setEmail(e.target.value)} />
      <input value={password} onChange={e => setPassword(e.target.value)} />
      <button type="submit">Login</button>
    </form>
  );
}
```

8. Diagrama de flujo textual del sistema
----------------------------------------

1. El usuario entra a la web y ve los productos (GET /products/).
2. Si quiere registrarse, va a /register y completa el formulario (POST /auth/register).
3. Si inicia sesión, va a /login y envía sus datos (POST /auth/login). El backend responde con un token.
4. El usuario puede agregar productos al carrito (POST /cart/), ver su carrito (GET /cart/), eliminar productos (DELETE /cart/{item_id}).
5. Puede ver y editar su perfil (GET y PUT /users/me).
6. Todo el tiempo, el frontend muestra mensajes de éxito o error según la respuesta del backend.

**Resumen visual:**

Usuario → Frontend (React/Next.js) → Backend (FastAPI) → Base de datos (SQLite)
           ↑                ↓
         Mensajes, formularios, productos, carrito, perfil

¿Querés que agregue ejemplos de cómo crear un endpoint nuevo, o cómo modificar un modelo? Pídelo y te lo agrego aquí mismo.
KickShopping - Explicación del Proyecto
=====================================

1. Estructura del Proyecto
--------------------------
- backend/        Código del backend (API REST con FastAPI y base de datos)
- Frontend/       Código del frontend (Next.js, React, TypeScript)
- .git/           Carpeta interna de Git (no modificar)
- README.md, package.json, etc.  Archivos de configuración y documentación

2. Backend (FastAPI)
--------------------
¿Dónde está el backend?
- Carpeta: backend/
- Código principal: backend/app/

Archivos y carpetas clave:
- main.py: Arranca la app FastAPI, configura CORS y conecta los routers.
- models.py: Define las tablas de la base de datos (Usuario, Producto, Carrito).
- schemas.py: Define los esquemas de validación de datos (entrada/salida).
- database.py: Configura la conexión a la base de datos SQLite.
- routers/: Carpeta con los endpoints (rutas) de la API:
  - auth.py: Registro y login de usuarios.
  - products.py: Listar y crear productos.
  - cart.py: Agregar, quitar y ver productos en el carrito.

KickShopping - Explicación Detallada del Proyecto
================================================

1. Estructura General del Proyecto
----------------------------------
El proyecto KickShopping está organizado en dos grandes partes: el backend (servidor y base de datos) y el frontend (interfaz de usuario). Cada parte tiene su propia carpeta y archivos clave.

- backend/        → Lógica del servidor, API REST, base de datos.
- Frontend/       → Aplicación web, interfaz visual, interacción con el usuario.
- public/         → Imágenes y archivos estáticos usados por el frontend.
- .git/           → Carpeta interna de Git (no modificar).
- README.md       → Documentación general.
- KickShopping_EXPLICACION.txt → Este archivo de explicación.


2. Backend (FastAPI + SQLAlchemy + SQLite)
------------------------------------------
El backend es el "cerebro" del sistema. Se encarga de recibir las peticiones del frontend, procesar la lógica, acceder a la base de datos y devolver respuestas.

- **main.py**: Es el archivo principal. Aquí se crea la aplicación FastAPI, se configuran los permisos CORS (para que el frontend pueda comunicarse), y se incluyen los routers (rutas/endpoints) de cada módulo.

- **models.py**: Define las clases que representan las tablas de la base de datos usando SQLAlchemy. Por ejemplo, hay una clase `User` para los usuarios, `Product` para los productos y `CartItem` para los ítems del carrito. Cada clase tiene atributos que corresponden a las columnas de la tabla.

- **schemas.py**: Define los modelos de datos que se usan para validar y estructurar la información que entra y sale de la API. Por ejemplo, `UserCreate` valida los datos al registrar un usuario.

- **database.py**: Configura la conexión a la base de datos SQLite y crea la sesión para interactuar con ella.

- **utils.py**: Funciones auxiliares, como la creación automática de tablas si no existen.

- **routers/**: Carpeta que agrupa los diferentes módulos de la API. Cada archivo define un conjunto de rutas relacionadas:
    - `auth.py`: Registro y login de usuarios. Valida que el email sea de Gmail y que el usuario no exista.
    - `products.py`: Permite listar productos y agregar nuevos productos.
    - `cart.py`: Permite ver el carrito, agregar productos y eliminar productos del carrito.
    - `users.py`: Permite ver y editar el perfil del usuario autenticado.


**Flujo típico del backend:**
1. El usuario realiza una acción en el frontend (por ejemplo, registrarse o comprar).
2. El frontend envía una petición HTTP al backend (por ejemplo, POST a `/auth/register`).
3. El backend recibe la petición, valida los datos con los esquemas, ejecuta la lógica necesaria (crear usuario, agregar producto, etc.) y responde con éxito o error.
4. El frontend muestra el resultado al usuario.

**Cómo manejar el backend:**
- Para ejecutar el backend: abrir terminal en `backend/` y correr `uvicorn app.main:app --reload`.
- Para modificar la lógica: editar los archivos `.py` en `backend/app/`.
- Para agregar endpoints: crear nuevas funciones en los archivos de `routers/` y definir la ruta y el método HTTP.
- Para probar la API: usar `/docs` (Swagger UI) en `http://localhost:8000/docs`.


3. Frontend (Next.js + React + TypeScript)
------------------------------------------
El frontend es la "cara" del sistema. Permite a los usuarios interactuar con la tienda de forma visual y sencilla.

- **app/page.tsx**: Página principal. Muestra el listado de productos obtenidos desde el backend.
- **app/register/page.tsx**: Formulario de registro. Solo permite emails de Gmail. Envía los datos al backend.
- **app/login/page.tsx**: Formulario de login. Si el login es exitoso, guarda el token y redirige al usuario.
- **app/carrito/page.tsx**: Muestra los productos en el carrito. Permite eliminar productos y ver el total.
- **app/usuario/page.tsx**: Muestra y permite editar los datos del usuario.
- **globals.css** y otros `.css`: Estilos globales y específicos de cada página.

**Flujo típico del frontend:**
1. El usuario navega por la tienda, se registra, inicia sesión, agrega productos al carrito, etc.
2. Cada acción relevante (registrar, login, comprar, editar perfil) hace una petición HTTP al backend usando `fetch`.
3. El frontend recibe la respuesta y actualiza la interfaz según el resultado (muestra productos, errores, confirma compras, etc).

**Cómo manejar el frontend:**
- Para ejecutar el frontend: abrir terminal en `Frontend/` y correr `npm install` (solo la primera vez) y luego `npm run dev`.
- Para modificar la interfaz: editar los archivos `.tsx` y `.css` en `Frontend/app/`.
- Para agregar páginas: crear nuevos archivos o carpetas en `Frontend/app/` siguiendo la estructura de Next.js.
- Para conectar nuevas páginas al backend: usar `fetch` para llamar a los endpoints correspondientes.


4. Ejemplo de flujo completo (compra de un producto)
---------------------------------------------------
1. El usuario inicia sesión desde `/login`.
2. Navega por los productos en `/` y hace clic en "Comprar" en un producto.
3. El frontend envía una petición POST al endpoint `/cart/` del backend para agregar el producto al carrito.
4. El backend valida el usuario, agrega el producto al carrito en la base de datos y responde con éxito.
5. El frontend actualiza la vista del carrito en `/carrito` mostrando el nuevo producto y el total.
6. El usuario puede eliminar productos del carrito (DELETE a `/cart/{item_id}`) o finalizar la compra (puedes agregar esta lógica si lo deseas).


5. Consejos para modificar y ampliar el proyecto
-----------------------------------------------
- Si quieres agregar una nueva funcionalidad (por ejemplo, favoritos), crea un nuevo archivo en `routers/` para el backend y una nueva página o componente en el frontend.
- Para cambiar la base de datos, modifica `database.py` y los modelos en `models.py`.
- Para cambiar el diseño, edita los archivos `.css` en el frontend.
- Siempre prueba los cambios usando el frontend y la documentación interactiva del backend (`/docs`).


6. Resumen de carpetas y archivos clave
---------------------------------------
- **backend/app/main.py**: Arranque y configuración general del backend.
- **backend/app/models.py**: Estructura de la base de datos.
- **backend/app/schemas.py**: Validación de datos de entrada/salida.
- **backend/app/routers/**: Endpoints de la API.
- **Frontend/app/**: Páginas y componentes del frontend.
- **public/**: Imágenes y recursos estáticos.
- **KickShopping_EXPLICACION.txt**: Este archivo, con la explicación detallada.


